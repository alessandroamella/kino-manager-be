generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  M
  F
  X
}

model Member {
  id                   Int             @id @default(autoincrement())
  firstName            String
  lastName             String
  gender               Gender          @default(X)
  email                String          @unique
  password             String
  codiceFiscale        String? // null if birthCountry is not 'IT'
  address              String // to be split into address components
  streetName           String?
  streetNumber         Int?
  postalCode           String?
  city                 String?
  province             String?
  country              String?
  phoneNumber          String
  birthDate            DateTime
  signatureR2Key       String
  birthCountry         String // alpha-2 code
  birthComune          String? // null if birthCountry is not 'IT'
  birthProvince        String? // null if birthCountry is not 'IT'
  membershipCard       MembershipCard? @relation(fields: [membershipCardNumber], references: [number])
  membershipCardNumber Int?            @unique
  memberSince          DateTime?
  resetPwdJwt          String?
  isAdmin              Boolean         @default(false)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model MembershipCard {
  number Int     @id
  member Member?
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String? // for the cashier
  description String?
  isPublic    Boolean  @default(true)
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id          Int             @id @default(autoincrement())
  name        String
  nameShort   String?
  description String?
  price       Float
  imageUrl    String? // for the cashier
  cost        Float?
  isPublic    Boolean         @default(true)
  purchases   PurchasedItem[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    Category?       @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

enum PaymentMethod {
  CASH
  CARD
}

model Purchase {
  id             Int             @id @default(autoincrement())
  purchaseDate   DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchasedItems PurchasedItem[]
  discount       Float           @default(0)
  paymentMethod  PaymentMethod
  givenAmount    Float
  total          Float
}

model PurchasedItem {
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseId Int
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId     Int
  quantity   Int      @default(1)

  @@id([purchaseId, itemId])
}
