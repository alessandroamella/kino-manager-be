generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  M
  F
  X
}

enum SubscriptionStatus {
  SUBSCRIBED
  UNSUBSCRIBED
}

enum DeliveryStatus {
  PENDING
  SENDING
  SENT
  FAILED
}

model Newsletter {
  id          Int                  @id @default(autoincrement())
  subject     String
  ejsString   String               @db.Text // member will be injected in ejs
  scheduledAt DateTime
  status      DeliveryStatus       @default(PENDING) // Initially pending until sending starts
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deliveries  NewsletterDelivery[]
}

model Member {
  id                           Int                  @id @default(autoincrement())
  firstName                    String
  lastName                     String
  gender                       Gender               @default(X)
  email                        String               @unique
  password                     String
  codiceFiscale                String? // null if birthCountry is not 'IT'
  address                      String // to be split into address components
  streetName                   String?
  streetNumber                 Int?
  postalCode                   String?
  city                         String?
  province                     String?
  country                      String?
  phoneNumber                  String
  birthDate                    DateTime
  signatureR2Key               String
  birthCountry                 String // alpha-2 code
  birthComune                  String? // null if birthCountry is not 'IT'
  birthProvince                String? // null if birthCountry is not 'IT'
  membershipCard               MembershipCard?      @relation(fields: [membershipCardNumber], references: [number])
  membershipCardNumber         Int?                 @unique
  memberSince                  DateTime?
  resetPwdJwt                  String?
  userAgent                    String?
  ipAddress                    String?
  isAdmin                      Boolean              @default(false)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  newsletterSubscriptionStatus SubscriptionStatus   @default(SUBSCRIBED)
  newsletterSubscribedAt       DateTime             @default(now())
  newsletterUnsubscribedAt     DateTime?
  newsletterDeliveries         NewsletterDelivery[]
  attendances                  Attendance[]
  expenses                     Expense[]
}

model NewsletterDelivery {
  id           Int            @id @default(autoincrement())
  newsletter   Newsletter     @relation(fields: [newsletterId], references: [id])
  newsletterId Int
  member       Member         @relation(fields: [memberId], references: [id])
  memberId     Int
  sentAt       DateTime?
  status       DeliveryStatus @default(PENDING) // Initially pending until sending starts
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([newsletterId, memberId])
}

model MembershipCard {
  number Int     @id
  member Member?
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String? // for the cashier
  description String?
  isPublic    Boolean  @default(true)
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id          Int             @id @default(autoincrement())
  name        String
  nameShort   String?
  description String?
  price       Float
  imageUrl    String? // for the cashier
  cost        Float?
  isPublic    Boolean         @default(true)
  purchases   PurchasedItem[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    Category?       @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

enum PaymentMethod {
  CASH
  CARD
}

model Purchase {
  id             Int             @id @default(autoincrement())
  purchaseDate   DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchasedItems PurchasedItem[]
  discount       Float           @default(0)
  paymentMethod  PaymentMethod
  givenAmount    Float
  total          Float
}

model PurchasedItem {
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseId Int
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId     Int
  quantity   Int      @default(1)

  @@id([purchaseId, itemId])
}

model OpeningDay {
  id           Int          @id @default(autoincrement())
  openTimeUTC  DateTime     @unique
  closeTimeUTC DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendances  Attendance[]
}

model Attendance {
  id           Int        @id @default(autoincrement())
  member       Member     @relation(fields: [memberId], references: [id])
  memberId     Int
  openingDay   OpeningDay @relation(fields: [openingDayId], references: [id])
  openingDayId Int
  checkInUTC   DateTime
  checkOutUTC  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([memberId, openingDayId])
}

model Expense {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        Member   @relation(fields: [userId], references: [id])
  description String
  amount      Float
  repaid      Boolean  @default(false)
  imageR2Key  String? // e.g. receipt
  expenseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, description, amount, expenseDate])
}
